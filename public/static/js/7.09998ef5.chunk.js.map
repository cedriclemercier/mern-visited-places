{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Maps","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","Map","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","Fragment","ErrorModal","onClear","Modal","show","onClick","header","address","contentClass","footerClass","footer","Button","coordinates","onCancel","inverse","danger","a","async","process","id","Authorization","token","onDelete","LoadingSpinner","asOverLay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","el","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter","place"],"mappings":"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","file":"static/js/7.09998ef5.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\r\n\r\nimport './Map.css';\r\n\r\nconst Maps = props => {\r\n  const mapRef = useRef();\r\n\r\n  const { center, zoom } = props;\r\n\r\n  useEffect(() => {\r\n    const map = new window.google.maps.Map(mapRef.current, {\r\n      center: center,\r\n      zoom: zoom\r\n    });\r\n\r\n    new window.google.maps.Marker({ position: center, map: map });\r\n  }, [center, zoom]);\r\n\r\n  return (\r\n    <div\r\n      ref={mapRef}\r\n      className={`map ${props.className}`}\r\n      style={props.style}></div>\r\n  );\r\n};\r\n\r\nexport default Maps;\r\n","import React, { useState, useContext } from 'react';\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Modal from '../../shared/components/UIElements/Modal';\r\nimport Maps from '../../shared/components/UIElements/Map';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\n\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport './PlaceItem.css';\r\n\r\nconst PlaceItem = props => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  const openMapHandler = () => setShowMap(true);\r\n\r\n  const closeMapHandler = () => setShowMap(false);\r\n\r\n  const showDeleteWarmingHandler = () => setShowConfirmModal(true);\r\n\r\n  const cancelDeleteHandler = () => setShowConfirmModal(false);\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`, 'DELETE', null, {Authorization: 'Bearer ' + auth.token});\r\n      props.onDelete(props.id);\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Modal\r\n        show={showMap}\r\n        onClick={closeMapHandler}\r\n        header={props.address}\r\n        contentClass='place-item__modal-content'\r\n        footerClass='place-item__modal-actions'\r\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}>\r\n        <div className='map-container'>\r\n          <Maps center={props.coordinates} zoom={16} />\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header='Are you sure?'\r\n        footerClass='place-item___modal-actions'\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={cancelDeleteHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandler}>\r\n              DELETE\r\n            </Button>\r\n          </React.Fragment>\r\n        }>\r\n        <p>Do you want to proceed to delete this place? Please not that it can't be undone thereafter.</p>\r\n      </Modal>\r\n      <li className='place-item'>\r\n        <Card className='place-item__content'>\r\n          {isLoading && <LoadingSpinner asOverLay />}\r\n          <div className='place-item__image'>\r\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\r\n          </div>\r\n          <div className='place-item__info'>\r\n            <h2>{props.title}</h2>\r\n            <h3>{props.address}</h3>\r\n            <p>{props.description}</p>\r\n          </div>\r\n          <div className='place-item__actions'>\r\n            <Button inverse onClick={openMapHandler}>\r\n              VIEW ON MAP\r\n            </Button>\r\n            {auth.userId === props.creatorId && <Button to={`/places/${props.id}`}>EDIT</Button>}\r\n            {auth.userId === props.creatorId && (\r\n              <Button danger onClick={showDeleteWarmingHandler}>\r\n                DELETE\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlaceItem;\r\n","import React from 'react';\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport PlaceItem from './PlaceItem';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport './PlaceList.css';\r\n\r\nconst PlaceList = props => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n      <div className='place-list center'>\r\n        <Card>\r\n          <h2>No Places found. Maybe create one?</h2>\r\n\r\n          <Button to=\"/places/new\">Share Place</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <ul className='place-list'>\r\n      {props.items.map(el => (\r\n        <PlaceItem\r\n          key={el.id}\r\n          id={el.id}\r\n          image={el.image}\r\n          title={el.title}\r\n          description={el.description}\r\n          address={el.address}\r\n          creatorId={el.creator}\r\n          coordinates={el.location}\r\n          onDelete={props.onDeletePlace}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PlaceList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport PlaceList from '../components/PlaceList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nconst UserPlaces = () => {\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`);\r\n        setLoadedPlaces(responseData.places);\r\n      } catch (err) {}\r\n    };\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  const placeDeletedHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces(prevPlaces => prevPlaces.filter(place => place.id !== deletedPlaceId));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className='center'>\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserPlaces;\r\n"],"sourceRoot":""}